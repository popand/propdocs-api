// PropDocs API - Prisma Schema
// Property Asset Management System Database Schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// User Management & Authentication
// ================================

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Authentication providers
  appleId  String? @unique @map("apple_id")
  googleId String? @unique @map("google_id")

  // Subscription tier
  subscriptionTier SubscriptionTier @default(FREE) @map("subscription_tier")

  // Soft delete
  deletedAt DateTime? @map("deleted_at")

  // Relationships
  properties       Property[]
  sessions         UserSession[]
  preferences      UserPreferences?
  activityLogs     UserActivityLog[]
  propertyShares   PropertyShare[]
  propertyAccesses PropertyAccess[]
  granterAccesses  PropertyAccess[] @relation("PropertyAccessGranter")
  notifications    Notification[]

  @@index([email])
  @@index([subscriptionTier])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("users")
}

model UserSession {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  refreshToken String    @unique @map("refresh_token")
  expiresAt    DateTime  @map("expires_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  revokedAt    DateTime? @map("revoked_at")

  // Device info
  deviceType String? @map("device_type")
  ipAddress  String? @map("ip_address")
  userAgent  String? @map("user_agent")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([createdAt])
  @@map("user_sessions")
}

model UserPreferences {
  id     String @id @default(cuid())
  userId String @unique @map("user_id")

  // Notification preferences
  emailNotifications     Boolean @default(true) @map("email_notifications")
  pushNotifications      Boolean @default(true) @map("push_notifications")
  maintenanceReminders   Boolean @default(true) @map("maintenance_reminders")
  reportSharing          Boolean @default(false) @map("report_sharing")

  // Display preferences
  timezone               String  @default("UTC")
  dateFormat             String  @default("MM/DD/YYYY") @map("date_format")
  temperatureUnit        String  @default("F") @map("temperature_unit")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model UserActivityLog {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  action    String
  resource  String?
  metadata  Json?
  ipAddress String?  @map("ip_address")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([action])
  @@map("user_activity_logs")
}

// ================================
// Property Management
// ================================

model Property {
  id        String   @id @default(cuid())
  name      String
  type      PropertyType
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Address information
  address     String
  city        String
  state       String
  zipCode     String  @map("zip_code")
  country     String  @default("US")
  latitude    Float?
  longitude   Float?

  // Property details
  yearBuilt     Int?    @map("year_built")
  squareFeet    Int?    @map("square_feet")
  bedrooms      Int?
  bathrooms     Float?
  description   String?

  // Ownership
  ownerId String @map("owner_id")

  // Soft delete
  deletedAt DateTime? @map("deleted_at")

  // Relationships
  owner    User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  assets   Asset[]
  photos   PropertyPhoto[]
  shares   PropertyShare[]
  accesses PropertyAccess[]

  @@index([ownerId])
  @@index([type])
  @@index([city, state])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("properties")
}

model PropertyPhoto {
  id         String   @id @default(cuid())
  propertyId String   @map("property_id")
  url        String
  thumbnail  String?
  caption    String?
  order      Int      @default(0)
  createdAt  DateTime @default(now()) @map("created_at")

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, order])
  @@map("property_photos")
}

// ================================
// Asset Management
// ================================

model Asset {
  id         String   @id @default(cuid())
  propertyId String   @map("property_id")
  name       String
  category   AssetCategory
  type       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Asset details
  brand            String?
  model            String?
  serialNumber     String?   @map("serial_number")
  purchaseDate     DateTime? @map("purchase_date")
  installationDate DateTime? @map("installation_date")
  warrantyExpiry   DateTime? @map("warranty_expiry")
  purchasePrice    Float?    @map("purchase_price")

  // Condition tracking
  condition      AssetCondition @default(GOOD)
  conditionNotes String?        @map("condition_notes")
  lastInspected  DateTime?      @map("last_inspected")

  // Location within property
  location String?
  room     String?

  // Specifications (JSON for flexibility)
  specifications Json?

  // Soft delete
  deletedAt DateTime? @map("deleted_at")

  // Relationships
  property            Property             @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  photos              AssetPhoto[]
  documents           AssetDocument[]
  maintenanceSchedules MaintenanceSchedule[]
  serviceRecords      ServiceRecord[]
  parentAssets        AssetHierarchy[]     @relation("AssetParent")
  childAssets         AssetHierarchy[]     @relation("AssetChild")

  @@index([propertyId])
  @@index([category])
  @@index([condition])
  @@index([warrantyExpiry])
  @@index([lastInspected])
  @@index([createdAt])
  @@index([deletedAt])
  @@map("assets")
}

model AssetPhoto {
  id        String   @id @default(cuid())
  assetId   String   @map("asset_id")
  url       String
  thumbnail String?
  caption   String?
  order     Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, order])
  @@map("asset_photos")
}

model AssetDocument {
  id          String      @id @default(cuid())
  assetId     String      @map("asset_id")
  name        String
  type        DocumentType
  url         String
  size        Int?
  mimeType    String?     @map("mime_type")
  description String?
  createdAt   DateTime    @default(now()) @map("created_at")

  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)

  @@index([assetId, type])
  @@map("asset_documents")
}

// ================================
// Maintenance & Service Management
// ================================

model MaintenanceSchedule {
  id       String @id @default(cuid())
  assetId  String @map("asset_id")
  title    String
  description String?

  // Schedule configuration
  frequency     MaintenanceFrequency
  interval      Int                  @default(1) // Every N units (1 month, 3 months, etc.)
  startDate     DateTime             @map("start_date")
  nextDue       DateTime             @map("next_due")

  // Status
  isActive      Boolean              @default(true) @map("is_active")
  priority      MaintenancePriority  @default(MEDIUM)

  // Cost estimation
  estimatedCost Float?               @map("estimated_cost")
  estimatedTime Int?                 @map("estimated_time") // in minutes

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  asset          Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  maintenanceTasks MaintenanceTask[]

  @@index([assetId])
  @@index([nextDue])
  @@index([isActive])
  @@index([priority])
  @@map("maintenance_schedules")
}

model MaintenanceTask {
  id         String   @id @default(cuid())
  scheduleId String   @map("schedule_id")
  title      String
  description String?
  dueDate    DateTime @map("due_date")
  
  // Status tracking
  status       TaskStatus @default(PENDING)
  completedAt  DateTime?  @map("completed_at")
  completedBy  String?    @map("completed_by")
  notes        String?

  // Cost tracking
  actualCost   Float?     @map("actual_cost")
  actualTime   Int?       @map("actual_time") // in minutes

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  schedule       MaintenanceSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  serviceRecords ServiceRecord[]

  @@index([scheduleId])
  @@index([status])
  @@index([dueDate])
  @@index([status, dueDate])
  @@map("maintenance_tasks")
}

model ServiceRecord {
  id          String   @id @default(cuid())
  assetId     String   @map("asset_id")
  taskId      String?  @map("task_id") // Optional link to maintenance task
  title       String
  description String
  serviceDate DateTime @map("service_date")

  // Service provider info
  providerName    String?  @map("provider_name")
  providerContact String?  @map("provider_contact")
  
  // Cost information
  cost            Float?
  laborCost       Float?   @map("labor_cost")
  partsCost       Float?   @map("parts_cost")
  
  // Service details
  warrantyPeriod  Int?     @map("warranty_period") // in days
  notes           String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relationships
  asset    Asset           @relation(fields: [assetId], references: [id], onDelete: Cascade)
  task     MaintenanceTask? @relation(fields: [taskId], references: [id])
  provider ServiceProvider? @relation(fields: [providerId], references: [id])

  // New field for service provider relationship
  providerId String? @map("provider_id")

  @@index([assetId])
  @@index([serviceDate])
  @@index([providerId])
  @@map("service_records")
}

// ================================
// Enums
// ================================

enum SubscriptionTier {
  FREE
  PREMIUM
  PROFESSIONAL
}

enum PropertyType {
  HOUSE
  CONDO
  APARTMENT
  TOWNHOUSE
  MOBILE_HOME
  OTHER
}

enum AssetCategory {
  HVAC
  PLUMBING
  ELECTRICAL
  APPLIANCES
  SECURITY
  LANDSCAPING
  STRUCTURAL
  EXTERIOR
  INTERIOR
  MECHANICAL
  OTHER
}

enum AssetCondition {
  EXCELLENT
  GOOD
  FAIR
  POOR
  NEEDS_REPLACEMENT
}

enum DocumentType {
  WARRANTY
  MANUAL
  INVOICE
  RECEIPT
  INSPECTION_REPORT
  PHOTO
  OTHER
}

enum MaintenanceFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  ANNUAL
  BI_ANNUAL
  CUSTOM
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// ================================
// Enhanced Models for Sharing & Permissions
// ================================

model PropertyShare {
  id            String               @id @default(cuid())
  propertyId    String               @map("property_id")
  shareToken    String               @unique @map("share_token")
  level         PropertySharingLevel
  expiresAt     DateTime?            @map("expires_at")
  allowDownload Boolean              @default(false) @map("allow_download")
  passwordHash  String?              @map("password_hash")
  viewCount     Int                  @default(0) @map("view_count")
  lastViewed    DateTime?            @map("last_viewed")
  createdAt     DateTime             @default(now()) @map("created_at")
  createdBy     String               @map("created_by")

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  creator  User     @relation(fields: [createdBy], references: [id])

  @@index([shareToken])
  @@index([propertyId])
  @@index([expiresAt])
  @@map("property_shares")
}

model PropertyAccess {
  id         String       @id @default(cuid())
  propertyId String       @map("property_id")
  userId     String       @map("user_id")
  role       PropertyRole
  grantedAt  DateTime     @default(now()) @map("granted_at")
  grantedBy  String       @map("granted_by")
  revokedAt  DateTime?    @map("revoked_at")

  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  granter  User     @relation("PropertyAccessGranter", fields: [grantedBy], references: [id])

  @@unique([propertyId, userId])
  @@index([propertyId])
  @@index([userId])
  @@map("property_access")
}

model AssetHierarchy {
  id         String    @id @default(cuid())
  parentId   String    @map("parent_id")
  childId    String    @map("child_id")
  systemName String?   @map("system_name")
  createdAt  DateTime  @default(now()) @map("created_at")

  parent Asset @relation("AssetParent", fields: [parentId], references: [id], onDelete: Cascade)
  child  Asset @relation("AssetChild", fields: [childId], references: [id], onDelete: Cascade)

  @@unique([parentId, childId])
  @@index([parentId])
  @@index([childId])
  @@map("asset_hierarchy")
}

model MaintenanceTemplate {
  id            String              @id @default(cuid())
  title         String
  description   String?
  frequency     MaintenanceFrequency
  interval      Int                 @default(1)
  priority      MaintenancePriority @default(MEDIUM)
  estimatedCost Float?              @map("estimated_cost")
  estimatedTime Int?                @map("estimated_time")
  category      AssetCategory
  assetTypes    String[]            @map("asset_types")
  isActive      Boolean             @default(true) @map("is_active")
  createdAt     DateTime            @default(now()) @map("created_at")
  updatedAt     DateTime            @updatedAt @map("updated_at")

  @@index([category])
  @@index([isActive])
  @@map("maintenance_templates")
}

model ServiceProvider {
  id          String   @id @default(cuid())
  name        String
  contact     String
  email       String?
  phone       String?
  website     String?
  address     String?
  specialties String[]
  rating      Float?
  notes       String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  serviceRecords ServiceRecord[]

  @@index([name])
  @@index([isActive])
  @@map("service_providers")
}

model Notification {
  id           String           @id @default(cuid())
  userId       String           @map("user_id")
  type         NotificationType
  title        String
  message      String
  data         Json?
  isRead       Boolean          @default(false) @map("is_read")
  readAt       DateTime?        @map("read_at")
  sentAt       DateTime         @default(now()) @map("sent_at")
  scheduledFor DateTime?        @map("scheduled_for")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([sentAt])
  @@index([scheduledFor])
  @@map("notifications")
}

// ================================
// Enhanced Enums
// ================================

enum PropertySharingLevel {
  PRIVATE
  SHARED_LINK
  PUBLIC_LISTING
}

enum PropertyRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

enum NotificationType {
  MAINTENANCE_DUE
  MAINTENANCE_OVERDUE
  WARRANTY_EXPIRING
  SYSTEM_UPDATE
  SHARING_INVITE
  PAYMENT_REMINDER
}
